# secrets_s3.tf - Secrets Manager and S3 configuration

# Generate random Flask secret key
resource "random_password" "flask_secret_key" {
  length  = 64
  special = true
}

# Application Secrets
resource "aws_secretsmanager_secret" "app_secrets" {
  name                    = "${local.name_prefix}/app/secrets"
  description             = "Application secrets for ThreatCompass"
  recovery_window_in_days = 30

  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-app-secrets"
  })
}

resource "aws_secretsmanager_secret_version" "app_secrets" {
  secret_id = aws_secretsmanager_secret.app_secrets.id
  secret_string = jsonencode({
    flask_secret_key     = random_password.flask_secret_key.result
    virustotal_api_key   = var.virustotal_api_key
    abuseipdb_api_key    = var.abuseipdb_api_key
    smtp_password        = var.smtp_password
    jwt_secret_key       = random_password.jwt_secret_key.result
  })
}

# Additional secret for JWT
resource "random_password" "jwt_secret_key" {
  length  = 64
  special = true
}

# S3 Bucket for Application Logs and Static Assets
resource "aws_s3_bucket" "logs" {
  bucket = "${local.name_prefix}-logs-${random_string.bucket_suffix.result}"

  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-logs-bucket"
  })
}

resource "random_string" "bucket_suffix" {
  length  = 8
  special = false
  upper   = false
}

# S3 Bucket Versioning
resource "aws_s3_bucket_versioning" "logs" {
  bucket = aws_s3_bucket.logs.id
  versioning_configuration {
    status = "Enabled"
  }
}

# S3 Bucket Server-Side Encryption
resource "aws_s3_bucket_server_side_encryption_configuration" "logs" {
  bucket = aws_s3_bucket.logs.id

  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm = "AES256"
    }
    bucket_key_enabled = true
  }
}

# S3 Bucket Public Access Block
resource "aws_s3_bucket_public_access_block" "logs" {
  bucket = aws_s3_bucket.logs.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

# S3 Bucket Lifecycle Configuration
resource "aws_s3_bucket_lifecycle_configuration" "logs" {
  depends_on = [aws_s3_bucket_versioning.logs]
  bucket     = aws_s3_bucket.logs.id

  rule {
    id     = "log_lifecycle"
    status = "Enabled"

    # Transition current version objects
    transition {
      days          = 30
      storage_class = "STANDARD_IA"
    }

    transition {
      days          = 90
      storage_class = "GLACIER"
    }

    transition {
      days          = 365
      storage_class = "DEEP_ARCHIVE"
    }

    # Delete current version objects after 7 years
    expiration {
      days = 2555  # 7 years
    }

    # Handle non-current versions
    noncurrent_version_transition {
      noncurrent_days = 30
      storage_class   = "STANDARD_IA"
    }

    noncurrent_version_transition {
      noncurrent_days = 90
      storage_class   = "GLACIER"
    }

    noncurrent_version_expiration {
      noncurrent_days = 365
    }

    # Clean up incomplete multipart uploads
    abort_incomplete_multipart_upload {
      days_after_initiation = 7
    }
  }
}

# S3 Bucket Notification for CloudWatch (optional)
# resource "aws_s3_bucket_notification" "logs" {
#   bucket = aws_s3_bucket.logs.id
# 
#   cloudwatch_configuration {
#     cloudwatch_configuration_id = "put-events"
#     events                      = ["s3:ObjectCreated:*"]
#   }
# }

# KMS Key for additional encryption (optional)
resource "aws_kms_key" "main" {
  description             = "KMS key for ThreatCompass encryption"
  deletion_window_in_days = 7

  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-kms-key"
  })
}

resource "aws_kms_alias" "main" {
  name          = "alias/${local.name_prefix}-key"
  target_key_id = aws_kms_key.main.key_id
}

# S3 Bucket for Terraform State (commented out - create manually before running)
# resource "aws_s3_bucket" "terraform_state" {
#   bucket = "threatcompass-terraform-state"
# 
#   tags = merge(local.common_tags, {
#     Name = "threatcompass-terraform-state"
#   })
# }
# 
# resource "aws_s3_bucket_versioning" "terraform_state" {
#   bucket = aws_s3_bucket.terraform_state.id
#   versioning_configuration {
#     status = "Enabled"
#   }
# }
# 
# resource "aws_s3_bucket_server_side_encryption_configuration" "terraform_state" {
#   bucket = aws_s3_bucket.terraform_state.id
# 
#   rule {
#     apply_server_side_encryption_by_default {
#       sse_algorithm = "AES256"
#     }
#   }
# }
# 
# # DynamoDB table for Terraform state locking
# resource "aws_dynamodb_table" "terraform_locks" {
#   name           = "threatcompass-terraform-locks"
#   billing_mode   = "PAY_PER_REQUEST"
#   hash_key       = "LockID"
# 
#   attribute {
#     name = "LockID"
#     type = "S"
#   }
# 
#   tags = merge(local.common_tags, {
#     Name = "threatcompass-terraform-locks"
#   })
# }